# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake build for the App-StepUp program

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Bazel output and repository cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/bazel
            ~/.cache/bazelisk
          key: bazel-${{ runner.os }}-${{ hashFiles('**/WORKSPACE', '**/BUILD.bazel', '**/BUILD') }}
          restore-keys: |
            bazel-${{ runner.os }}-

      # - name: Install Pi Pico SDK
      #   run: |
      #     git clone --depth=1 https://github.com/raspberrypi/pico-sdk.git ${{github.workspace}}/pico-sdk
      #     cd ${{github.workspace}}/pico-sdk
      #     git submodule update --init
      #   shell: bash

      # - name: Install ARM GCC toolchain and make
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y gcc-arm-none-eabi build-essential cmake

      # - name: Configure CMake
      #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #   env:
      #     PICO_SDK_PATH: ${{github.workspace}}/pico-sdk
      #   run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DPICO_SDK_PATH=${{github.workspace}}/pico-sdk

      - name: Build using Pico-Build-Action
        id: build
        uses: samyarsadat/Pico-Build-Action@v1
        with:
          source_dir: "${{github.workspace}}"
          cmake_args: "-DCMAKE_BUILD_TYPE=Debug"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: workspace_artifacts
          path: ${{steps.build.outputs.output_dir}}

      # - name: Build using CMake
      #   # Build your program with the given configuration
      #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Setup Bazel for unit testing
        uses: bazelbuild/setup-bazelisk@v3

      - name: Run Bazel tests
        working-directory: ${{github.workspace}}
        run: bazel test ...:all
